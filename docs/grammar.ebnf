/// Strings
//
// `"hello there"`
// `'hey'`
// `"\x68\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64"`
// `"\b1101000\b1100101\b1101100\b1101100\b1101111\b100000\b1110111\b1101111\b1110010\b1101100\b1100100"`
// `"\n\r\t\"\'\\"`
//
identifier ::= ? [^\s][^\s\(\)\{\}\.(0x)(0b)(p")(r")(#[)'"]+ ?
hex_chars ::= ? [A-Fa-f0-9]+ ?
bin_chars ::= ? [0-1]+ ?
any_char ::= ? . ?


hex ::= '\x' <hex_chars> {2}
bin ::= '\b' <bin_chars> {8}

escaped ::= '\"' | '\'' | '\n' | '\t' | '\r' | hex | bin
basic_string ::= ("'" | '"') ( <escaped> | <any_char> )* ("'" | '"')

paragraph_string ::= 'p' <any_char> ( '"' | "'" ) ( <escaped> | <any_char> )* ( '"' | "'" ) <any_char>
code_string ::= 'c' <any_char> ( '"' | "'" ) ( <escaped> | <any_char> )* ( '"' | "'" ) <any_char>
raw_string ::= 'r' <any_char> ( '"' | "'" ) ( <escaped> | <any_char> )* ( '"' | "'" ) <any_char>

hex_literal ::= '0x' ( <hex_chars> | '_' )*
bin_literal ::= '0b' ( <bin_chars> | '_' )*

string ::= <basic_string> | <paragraph_string> | <raw_string> | <code_string> | <hex_literal> | <bin_literal>


/// String slicing
// `"hello world"[6:]`
slice_index ::= <integer>
slice_start_only ::= <integer> ':'
slice_stop_only ::= ':' <integer>
slice_both ::= <integer> ':' <integer>

slice_alts ::= <slice_index> | ( <slice_start_only> | <slice_both> | <slice_stop_only> )

slice ::= <expression> '[' <slice_alts> ']'


/// Functions/Variables/Intrinsics/Drop/Pop
//
// `foo("bar", baz())`
// `let greeting(name) "hello " .. name`
// `let name "jack"`
// `name`
//
let_params ::= '(' [ <identifier> ( ',' <identifier> )* [ ',' ] ] ')'
let ::= 'let' <identifier> [ <let_params> ] <expression>

// Intrinsic functions
intrinsic_expr ::=
	'run'    <expression>               |
	'file'   <expression>               |
	'eval'   <expression>               |
	'use'    <expression>               |
	'pipe'   <expression> <expression>

intrinsic_stmt ::=
	'assert' <expression> <expression>  |
	'error'  <expression>               |
	'log'    <expression>

// Function call/Variable reference
call ::= <identifier> '(' [ <expression> ( ',' <expression> )* [ ',' ] ] ')'
varref ::= <identifier>

// `drop foo(x)`
// `drop foo`
drop ::= 'drop' ( <call> | <varref> )

// `pop foo(x, *)`
pop_substitutions ::= '*' [ ',' '*' ]
pop_identifiers ::= <identifier> [ ',' <identifier> ]
pop_body ::= ( <pop_identifiers> <pop_substitutions> ) | <pop_substitutions>

pop ::= 'pop' <identifier> '(' <pop_body> [ ',' ] ')'

// `!"'hey'"`
// `\hey`
codeify ::= '!' <expression>
stringify ::= '\\' <identifier>


/// Match
// match "foo" {
//     "foo" -> "bar"
//     "bar" -> "foo"
// }
match_or ::= ( <expression> ( '|' <expression> )* ) | '*'
match_also ::= <match_or> ( ',' <match_or> )*
match_arm ::= <match_also> '->' <expression>

match_test ::= <expression> ( ',' <expression> )*

match ::= 'match' <match_test> '{' <match_arm>* '}'


/// Misc.
//
// `#[ comment #[ nested comment ] ]`
//
// ! - Comments are just stripped from the source.
comment ::=
	'#[' ( <any_char> | <comment> )* ']' |
	'#' <any_char>* '\n'


/// Operators
//
// `"hello" .. " " .. "there"`
// `{ let name "jack", "a" .. "b" }`
//
block ::= '{' [ <statement>* ] expression '}'
concat ::= <expression> '..' <expression>


/// Document
expression ::= (
		<call>      |
		<varref>    |
		<block>     |
		<concat>    |
		<string>    |
		<match>     |
		<codeify>   |
		<stringify> |
		<pop>       |
		<slice>     |
		<intrinsic_expr>
	)


statement ::= <let> | <drop> | <expression> | <intrinsic_stmt>
document ::= <statement>*
