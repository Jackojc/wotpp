#[
	Fancy HTML example which makes use of styles and code highlighting
	with highlight.js
]

prefix html/ {
	let html(body)
		"<!DOCTYPE HTML><html>" .. body .. "</html>"

	let head(x) "<head>" .. x .. "</head>"
	let body(x) "<body>" .. x .. "</body>"

	let title(x) "<title>" .. x .. "</title>"

	let link(type, x) '<link rel="' .. type .. '" href="' .. x .. '">'

	let script(src) '<script src="' .. src .. '"></script>'
	let script_inline(src) '<script>' .. src .. '</script>'

	let style(f) html/link("stylesheet", f)
	let style_inline(x) "<style type='text/css'>" .. x .. "</style>"

	let h1(x) "<h1>" .. x .. "</h1>"
	let h2(x) "<h2>" .. x .. "</h2>"
	let h3(x) "<h3>" .. x .. "</h3>"
	let h4(x) "<h4>" .. x .. "</h4>"
	let h5(x) "<h5>" .. x .. "</h5>"

	let p(x) "<p>" .. x .. "</p>"
	let article(x) "<article>" .. x .. "</article>"
	let header(x) "<header>" .. x .. "</header>"
	let main(x) "<main>" .. x .. "</main>"
}


prefix code/ {
	let highlight(lang, code)
		"<pre><code class='lang-" .. lang .. "'>" .. code .. "</code></pre>"

	let new_highlighter(lang)
		eval("let code/" .. lang .. "(code) code/highlight('" .. lang .. "', code)")

	code/new_highlighter("cpp")
	code/new_highlighter("rust")
	code/new_highlighter("python")
}


#[ creates a header with title and author titles ]
let blog/header(title, author)
	html/header(html/h1(title) .. html/h5(author))

#[ blog template with header and posts section ]
let blog/blog(header, posts)
	html/html(
		html/head(
			html/style("https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/default.min.css") ..
			html/script("https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js") ..
			html/script_inline("hljs.initHighlightingOnLoad();") ..
			html/style_inline(user/style) ..
			html/title(user/title)
		) ..

		html/body(
			header ..
			html/main(posts)
		)
	)

#[ a post with title and body ]
let blog/post(title, body)
	html/article(
		html/h1(title) ..
		html/p(body)
	)


prefix user/ {
	let style "body{margin:40px auto;max-width:650px;line-height:1.6;font-size:18px;color:#444;padding:0 10px}h1,h2,h3{line-height:1.2}"
	let title "Wot++ Development Blog"
	let author "Jack Clarke"
}


blog/blog(
	blog/header(user/title, "by " .. user/author),

	blog/post("What is Wot++?", p#"
		Wot++ is a macro language that can wrap other formats
		like html or markdown with ease.
	"#) ..

	blog/post("Is Wot++ Turing Complete?", p#"
		Wot++ is lazily evaluated and so functions can define
		new functions when they are called. Wot++ also has meta-programming
		support through the use of the `source` intrinsic which runs a given string
		as Wot++ code within the current environment.
	"#) ..

	blog/post("Code",
		code/cpp(c#"
			int main(int, const char*[]) {
				std::cout << "Hello, World!\\n";
				return 0;
			}
		"#) ..

		code/rust(c#"
			fn main() {
				println!("Hello, World!\\n");
			}
		"#) ..

		code/python(c#"
			print("Hello, World!")
		"#)
	)
)




